apply plugin: 'maven-publish'
apply plugin: 'signing'


task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

android {
    publishing {
        singleVariant("release") {
            withJavadocJar()
        }
    }
}

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    // Read local.properties file first if it exists
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is -> p.load(is) }
    p.each { name, value ->
        ext[name] = value
    }
} else {
    // Use system environment variables
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["POM_DEVELOPER_ID"] = System.getenv('POM_DEVELOPER_ID')
    ext["POM_DEVELOPER_NAME"] = System.getenv('POM_DEVELOPER_NAME')
    ext["POM_DEVELOPER_EMAIL"] = System.getenv('POM_DEVELOPER_EMAIL')
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {

                from components.release

                groupId = 'com.iproyal.sdk'
                artifactId = 'internet-sharing'
                version = '1.2.0-SNAPSHOT01'

                pom {
                    name = artifactId
                    description = POM_DESCRIPTION
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = findProperty("POM_DEVELOPER_ID")
                            name =  findProperty("POM_DEVELOPER_NAME")
                            email = findProperty("POM_DEVELOPER_EMAIL")
                        }
                    }

                    // Version control info - if you're using GitHub, follow the
                    // format as seen here
//                    scm {
//                        connection = 'scm:git:github.com/getstream/stream-chat-android.git'
//                        developerConnection = 'scm:git:ssh://github.com/getstream/stream-chat-android.git'
//                        url = 'https://github.com/getstream/stream-chat-android/tree/main'
//                    }
                }
                repositories {
                    maven {
                        name = "SonatypeSnapshot"

                        def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                        def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                        credentials {
                            username findProperty("ossrhUsername")
                            password findProperty("ossrhPassword")
                        }
                    }

                    maven {
                        name = "Sonatype"

                        def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                        def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                        credentials {
                            username findProperty("ossrhUsername")
                            password findProperty("ossrhPassword")
                        }
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}
